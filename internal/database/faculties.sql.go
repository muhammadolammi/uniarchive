// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: faculties.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFaculty = `-- name: CreateFaculty :one

INSERT INTO faculties(created_at, updated_at, name, university_id)
VALUES(
    $1,
    $2,
    $3,
    $4
)
RETURNING id, created_at, updated_at, name, university_id
`

type CreateFacultyParams struct {
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Name         string
	UniversityID uuid.UUID
}

func (q *Queries) CreateFaculty(ctx context.Context, arg CreateFacultyParams) (Faculty, error) {
	row := q.db.QueryRowContext(ctx, createFaculty,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.UniversityID,
	)
	var i Faculty
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UniversityID,
	)
	return i, err
}

const getFaculties = `-- name: GetFaculties :many
SELECT id, created_at, updated_at, name, university_id FROM faculties WHERE university_id=$1
`

func (q *Queries) GetFaculties(ctx context.Context, universityID uuid.UUID) ([]Faculty, error) {
	rows, err := q.db.QueryContext(ctx, getFaculties, universityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Faculty
	for rows.Next() {
		var i Faculty
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.UniversityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
