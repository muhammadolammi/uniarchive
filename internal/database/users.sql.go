// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users(created_at, updated_at, name,level_id,  faculty_id, department_id, university_id)
VALUES(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id, created_at, updated_at, name, level_id, faculty_id, department_id, university_id
`

type CreateUserParams struct {
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Name         string
	LevelID      uuid.UUID
	FacultyID    uuid.UUID
	DepartmentID uuid.UUID
	UniversityID uuid.UUID
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.LevelID,
		arg.FacultyID,
		arg.DepartmentID,
		arg.UniversityID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.LevelID,
		&i.FacultyID,
		&i.DepartmentID,
		&i.UniversityID,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, created_at, updated_at, name, level_id, faculty_id, department_id, university_id FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.LevelID,
			&i.FacultyID,
			&i.DepartmentID,
			&i.UniversityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const makeUserAnAdmin = `-- name: MakeUserAnAdmin :exec
UPDATE users 
SET is_admin=true WHERE id=$1
`

func (q *Queries) MakeUserAnAdmin(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, makeUserAnAdmin, id)
	return err
}
