// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: departments.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDepartment = `-- name: CreateDepartment :one

INSERT INTO departments(created_at, updated_at, name, faculty_id)
VALUES(
    $1,
    $2,
    $3,
    $4
)
RETURNING id, created_at, updated_at, name, faculty_id
`

type CreateDepartmentParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	FacultyID uuid.UUID
}

func (q *Queries) CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (Department, error) {
	row := q.db.QueryRowContext(ctx, createDepartment,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.FacultyID,
	)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.FacultyID,
	)
	return i, err
}

const getDepartments = `-- name: GetDepartments :many
SELECT id, created_at, updated_at, name, faculty_id FROM departments WHERE faculty_id=$1
`

func (q *Queries) GetDepartments(ctx context.Context, facultyID uuid.UUID) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, getDepartments, facultyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.FacultyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
