// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: universities.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUniversity = `-- name: CreateUniversity :one

INSERT INTO universities(created_at, updated_at, name, alias)
VALUES(
    $1,
    $2,
    $3,
    $4
)
RETURNING id, created_at, updated_at, name, alias, is_admin
`

type CreateUniversityParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Alias     string
}

func (q *Queries) CreateUniversity(ctx context.Context, arg CreateUniversityParams) (University, error) {
	row := q.db.QueryRowContext(ctx, createUniversity,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Alias,
	)
	var i University
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Alias,
		&i.IsAdmin,
	)
	return i, err
}

const editUniversity = `-- name: EditUniversity :exec
UPDATE universities
SET 
  name = COALESCE($1, name),
  alias = COALESCE($2, alias), 
  updated_at=$3
WHERE id = $4
`

type EditUniversityParams struct {
	Name      string
	Alias     string
	UpdatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) EditUniversity(ctx context.Context, arg EditUniversityParams) error {
	_, err := q.db.ExecContext(ctx, editUniversity,
		arg.Name,
		arg.Alias,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const getUniversities = `-- name: GetUniversities :many
SELECT id, created_at, updated_at, name, alias, is_admin FROM universities
`

func (q *Queries) GetUniversities(ctx context.Context) ([]University, error) {
	rows, err := q.db.QueryContext(ctx, getUniversities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []University
	for rows.Next() {
		var i University
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Alias,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
